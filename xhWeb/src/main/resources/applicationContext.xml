<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd ">

	<description>Spring公共配置 </description>
	<!-- 使用 annotation 自动注册 bean,并保证 @Required, @Autowired 的属性被注入 -->
	<context:component-scan base-package="com.cssnb">
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

    <!-- map 验证的 bean -->
<!--     <bean id="mapValidationBeanFactory" class="net.coding.chenxiaobo.map.validation.spring.MapValidationBeanFactory" >
        <property name="mapperLocations" value="classpath*:valid/**/*.xml" />
    </bean> -->

    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                        <prop key="kaptcha.image.width">100</prop>
                        <prop key="kaptcha.image.height">40</prop>
                        <prop key="kaptcha.textproducer.font.size">40</prop>
                        <prop key="kaptcha.textproducer.char.string">0123456789</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>


    <!-- spring 对 ehcache 的缓存工厂支持 -->
   <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml" />
    </bean>

    <!-- spring 对 ehcache 的缓存管理 -->
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManagerFactory"></property>
    </bean>

    <!-- 使用缓存 annotation 配置 -->
    <cache:annotation-driven cache-manager="ehCacheManager" proxy-target-class="true" />

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢。slowSqlMillis的缺省值为3000，也就是3秒-->
        <property name="slowSqlMillis" value="10000" />
        <property name="logSlowSql" value="true" />
    </bean>

    <!-- 数据源配置 -->
<!--     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"        destroy-method="close">        -->
<!--     	 <property name="driverClassName" value="com.mysql.jdbc.Driver" />       -->
<!--    		<property name="url" value="jdbc:mysql://127.0.0.1:3306/xhweb" />       -->
<!--      	<property name="username" value="root" />       -->
<!--     	 <property name="password" value="123456" />       -->
<!--  	</bean>   -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>
	
    <!-- mybatis 配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations"  value="classpath*:mybatis/mapper/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="typeAliasesPackage" value="com.cssnb.baseframework.quickstart.entity"/>
    </bean>

    <!-- mybatis 扫描 mapper 对应类的配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cssnb" />
    </bean>

    <!-- 事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 使用 annotation 定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <!-- Security Configuration / Apache Shiro -->
      <import resource="applicationContext-shiro.xml" />  
    <import resource="applicationContext-webservice.xml" />
    <!-- 导入aop.xm -->
<!--       <import resource="applicationContext-quartz.xml" />   -->
    <!-- 定义演示环境的配置文件 -->
    
    <!--     添加配置文件 -->
<!-- 	<bean id="appProperty" -->
<!-- 		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!-- 		<property name="locations"> -->
<!-- 			<array> -->
<!-- 				<value>classpath:app.properties</value> -->
<!-- 			</array> -->
<!-- 		</property> -->
<!-- 	</bean> -->
    
    
    <beans profile="production">
        <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.properties" />
    </beans>

    <!-- 定义开发环境配置文件 -->
    <beans profile="development">
        <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.dev.properties" />
    </beans>

    <!-- 定义测试环境配置文件 -->
    <beans profile="test">

        <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.test.properties" />

        <!-- 运行测试环境时h2数据库的创建表 -->
        <bean id="dataSourceInitializer" class="org.springframework.jdbc.datasource.init.DataSourceInitializer">
            <property name="dataSource" ref="dataSource" />
            <property name="databasePopulator">
                <bean class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
                    <property name="scripts" value="classpath:sql/h2.sql" />
                </bean>
            </property>
        </bean>
     <context:annotation-config/>
    <!-- 定义 aop Aspect自动代理 -->
    </beans>

</beans>